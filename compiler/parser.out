Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> code
Rule 1     code -> body
Rule 2     body -> instruction
Rule 3     body -> label
Rule 4     label -> LABEL body
Rule 5     label -> empty
Rule 6     instruction -> spe_instr
Rule 7     instruction -> ari_instr
Rule 8     instruction -> reg_instr
Rule 9     instruction -> mem_instr
Rule 10    instruction -> bra_instr
Rule 11    ari_instr -> ari_instr_name REG COMMA REG COMMA REG SEMICOLON body
Rule 12    ari_instr -> ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body
Rule 13    ari_instr -> empty
Rule 14    reg_instr -> reg_instr_name REG COMMA REG SEMICOLON body
Rule 15    reg_instr -> reg_instr_name REG COMMA IMM SEMICOLON body
Rule 16    reg_instr -> empty
Rule 17    mem_instr -> mem_instr_name REG COMMA REG SEMICOLON body
Rule 18    mem_instr -> mem_instr_name REG COMMA IMM SEMICOLON body
Rule 19    mem_instr -> empty
Rule 20    bra_instr -> bra_instr_name LABEL SEMICOLON body
Rule 21    bra_instr -> empty
Rule 22    spe_instr -> STLL SEMICOLON body
Rule 23    spe_instr -> empty
Rule 24    ari_instr_name -> ADD
Rule 25    ari_instr_name -> ADDI
Rule 26    ari_instr_name -> SUB
Rule 27    ari_instr_name -> SUBI
Rule 28    ari_instr_name -> MUL
Rule 29    ari_instr_name -> MULI
Rule 30    reg_instr_name -> MOVI
Rule 31    reg_instr_name -> CMP
Rule 32    reg_instr_name -> CMPI
Rule 33    mem_instr_name -> STR
Rule 34    mem_instr_name -> STRI
Rule 35    mem_instr_name -> LD
Rule 36    bra_instr_name -> BGT
Rule 37    bra_instr_name -> BGTE
Rule 38    bra_instr_name -> BE
Rule 39    bra_instr_name -> B
Rule 40    bra_instr_name -> BRGT
Rule 41    bra_instr_name -> BRGTE
Rule 42    bra_instr_name -> BRE
Rule 43    bra_instr_name -> BR
Rule 44    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 24
ADDI                 : 25
B                    : 39
BE                   : 38
BGT                  : 36
BGTE                 : 37
BR                   : 43
BRE                  : 42
BRGT                 : 40
BRGTE                : 41
CMP                  : 31
CMPI                 : 32
COMMA                : 11 11 12 12 14 15 17 18
IMM                  : 12 15 18
LABEL                : 4 20
LD                   : 35
MOVI                 : 30
MUL                  : 28
MULI                 : 29
REG                  : 11 11 11 12 12 14 14 15 17 17 18
SEMICOLON            : 11 12 14 15 17 18 20 22
STLL                 : 22
STR                  : 33
STRI                 : 34
SUB                  : 26
SUBI                 : 27
error                : 

Nonterminals, with rules where they appear

ari_instr            : 7
ari_instr_name       : 11 12
body                 : 1 4 11 12 14 15 17 18 20 22
bra_instr            : 10
bra_instr_name       : 20
code                 : 0
empty                : 5 13 16 19 21 23
instruction          : 2
label                : 3
mem_instr            : 9
mem_instr_name       : 17 18
reg_instr            : 8
reg_instr_name       : 14 15
spe_instr            : 6

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . body
    (2) body -> . instruction
    (3) body -> . label
    (6) instruction -> . spe_instr
    (7) instruction -> . ari_instr
    (8) instruction -> . reg_instr
    (9) instruction -> . mem_instr
    (10) instruction -> . bra_instr
    (4) label -> . LABEL body
    (5) label -> . empty
    (22) spe_instr -> . STLL SEMICOLON body
    (23) spe_instr -> . empty
    (11) ari_instr -> . ari_instr_name REG COMMA REG COMMA REG SEMICOLON body
    (12) ari_instr -> . ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body
    (13) ari_instr -> . empty
    (14) reg_instr -> . reg_instr_name REG COMMA REG SEMICOLON body
    (15) reg_instr -> . reg_instr_name REG COMMA IMM SEMICOLON body
    (16) reg_instr -> . empty
    (17) mem_instr -> . mem_instr_name REG COMMA REG SEMICOLON body
    (18) mem_instr -> . mem_instr_name REG COMMA IMM SEMICOLON body
    (19) mem_instr -> . empty
    (20) bra_instr -> . bra_instr_name LABEL SEMICOLON body
    (21) bra_instr -> . empty
    (44) empty -> .
    (24) ari_instr_name -> . ADD
    (25) ari_instr_name -> . ADDI
    (26) ari_instr_name -> . SUB
    (27) ari_instr_name -> . SUBI
    (28) ari_instr_name -> . MUL
    (29) ari_instr_name -> . MULI
    (30) reg_instr_name -> . MOVI
    (31) reg_instr_name -> . CMP
    (32) reg_instr_name -> . CMPI
    (33) mem_instr_name -> . STR
    (34) mem_instr_name -> . STRI
    (35) mem_instr_name -> . LD
    (36) bra_instr_name -> . BGT
    (37) bra_instr_name -> . BGTE
    (38) bra_instr_name -> . BE
    (39) bra_instr_name -> . B
    (40) bra_instr_name -> . BRGT
    (41) bra_instr_name -> . BRGTE
    (42) bra_instr_name -> . BRE
    (43) bra_instr_name -> . BR

    LABEL           shift and go to state 10
    STLL            shift and go to state 12
    $end            reduce using rule 44 (empty -> .)
    ADD             shift and go to state 17
    ADDI            shift and go to state 18
    SUB             shift and go to state 19
    SUBI            shift and go to state 20
    MUL             shift and go to state 21
    MULI            shift and go to state 22
    MOVI            shift and go to state 23
    CMP             shift and go to state 24
    CMPI            shift and go to state 25
    STR             shift and go to state 26
    STRI            shift and go to state 27
    LD              shift and go to state 28
    BGT             shift and go to state 29
    BGTE            shift and go to state 30
    BE              shift and go to state 31
    B               shift and go to state 32
    BRGT            shift and go to state 33
    BRGTE           shift and go to state 34
    BRE             shift and go to state 35
    BR              shift and go to state 36

    code                           shift and go to state 1
    body                           shift and go to state 2
    instruction                    shift and go to state 3
    label                          shift and go to state 4
    spe_instr                      shift and go to state 5
    ari_instr                      shift and go to state 6
    reg_instr                      shift and go to state 7
    mem_instr                      shift and go to state 8
    bra_instr                      shift and go to state 9
    empty                          shift and go to state 11
    ari_instr_name                 shift and go to state 13
    reg_instr_name                 shift and go to state 14
    mem_instr_name                 shift and go to state 15
    bra_instr_name                 shift and go to state 16

state 1

    (0) S' -> code .



state 2

    (1) code -> body .

    $end            reduce using rule 1 (code -> body .)


state 3

    (2) body -> instruction .

    $end            reduce using rule 2 (body -> instruction .)


state 4

    (3) body -> label .

    $end            reduce using rule 3 (body -> label .)


state 5

    (6) instruction -> spe_instr .

    $end            reduce using rule 6 (instruction -> spe_instr .)


state 6

    (7) instruction -> ari_instr .

    $end            reduce using rule 7 (instruction -> ari_instr .)


state 7

    (8) instruction -> reg_instr .

    $end            reduce using rule 8 (instruction -> reg_instr .)


state 8

    (9) instruction -> mem_instr .

    $end            reduce using rule 9 (instruction -> mem_instr .)


state 9

    (10) instruction -> bra_instr .

    $end            reduce using rule 10 (instruction -> bra_instr .)


state 10

    (4) label -> LABEL . body
    (2) body -> . instruction
    (3) body -> . label
    (6) instruction -> . spe_instr
    (7) instruction -> . ari_instr
    (8) instruction -> . reg_instr
    (9) instruction -> . mem_instr
    (10) instruction -> . bra_instr
    (4) label -> . LABEL body
    (5) label -> . empty
    (22) spe_instr -> . STLL SEMICOLON body
    (23) spe_instr -> . empty
    (11) ari_instr -> . ari_instr_name REG COMMA REG COMMA REG SEMICOLON body
    (12) ari_instr -> . ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body
    (13) ari_instr -> . empty
    (14) reg_instr -> . reg_instr_name REG COMMA REG SEMICOLON body
    (15) reg_instr -> . reg_instr_name REG COMMA IMM SEMICOLON body
    (16) reg_instr -> . empty
    (17) mem_instr -> . mem_instr_name REG COMMA REG SEMICOLON body
    (18) mem_instr -> . mem_instr_name REG COMMA IMM SEMICOLON body
    (19) mem_instr -> . empty
    (20) bra_instr -> . bra_instr_name LABEL SEMICOLON body
    (21) bra_instr -> . empty
    (44) empty -> .
    (24) ari_instr_name -> . ADD
    (25) ari_instr_name -> . ADDI
    (26) ari_instr_name -> . SUB
    (27) ari_instr_name -> . SUBI
    (28) ari_instr_name -> . MUL
    (29) ari_instr_name -> . MULI
    (30) reg_instr_name -> . MOVI
    (31) reg_instr_name -> . CMP
    (32) reg_instr_name -> . CMPI
    (33) mem_instr_name -> . STR
    (34) mem_instr_name -> . STRI
    (35) mem_instr_name -> . LD
    (36) bra_instr_name -> . BGT
    (37) bra_instr_name -> . BGTE
    (38) bra_instr_name -> . BE
    (39) bra_instr_name -> . B
    (40) bra_instr_name -> . BRGT
    (41) bra_instr_name -> . BRGTE
    (42) bra_instr_name -> . BRE
    (43) bra_instr_name -> . BR

    LABEL           shift and go to state 10
    STLL            shift and go to state 12
    $end            reduce using rule 44 (empty -> .)
    ADD             shift and go to state 17
    ADDI            shift and go to state 18
    SUB             shift and go to state 19
    SUBI            shift and go to state 20
    MUL             shift and go to state 21
    MULI            shift and go to state 22
    MOVI            shift and go to state 23
    CMP             shift and go to state 24
    CMPI            shift and go to state 25
    STR             shift and go to state 26
    STRI            shift and go to state 27
    LD              shift and go to state 28
    BGT             shift and go to state 29
    BGTE            shift and go to state 30
    BE              shift and go to state 31
    B               shift and go to state 32
    BRGT            shift and go to state 33
    BRGTE           shift and go to state 34
    BRE             shift and go to state 35
    BR              shift and go to state 36

    body                           shift and go to state 37
    instruction                    shift and go to state 3
    label                          shift and go to state 4
    spe_instr                      shift and go to state 5
    ari_instr                      shift and go to state 6
    reg_instr                      shift and go to state 7
    mem_instr                      shift and go to state 8
    bra_instr                      shift and go to state 9
    empty                          shift and go to state 11
    ari_instr_name                 shift and go to state 13
    reg_instr_name                 shift and go to state 14
    mem_instr_name                 shift and go to state 15
    bra_instr_name                 shift and go to state 16

state 11

    (5) label -> empty .
    (23) spe_instr -> empty .
    (13) ari_instr -> empty .
    (16) reg_instr -> empty .
    (19) mem_instr -> empty .
    (21) bra_instr -> empty .

  ! reduce/reduce conflict for $end resolved using rule 5 (label -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 5 (label -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 5 (label -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 5 (label -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 5 (label -> empty .)
    $end            reduce using rule 5 (label -> empty .)

  ! $end            [ reduce using rule 23 (spe_instr -> empty .) ]
  ! $end            [ reduce using rule 13 (ari_instr -> empty .) ]
  ! $end            [ reduce using rule 16 (reg_instr -> empty .) ]
  ! $end            [ reduce using rule 19 (mem_instr -> empty .) ]
  ! $end            [ reduce using rule 21 (bra_instr -> empty .) ]


state 12

    (22) spe_instr -> STLL . SEMICOLON body

    SEMICOLON       shift and go to state 38


state 13

    (11) ari_instr -> ari_instr_name . REG COMMA REG COMMA REG SEMICOLON body
    (12) ari_instr -> ari_instr_name . REG COMMA REG COMMA IMM SEMICOLON body

    REG             shift and go to state 39


state 14

    (14) reg_instr -> reg_instr_name . REG COMMA REG SEMICOLON body
    (15) reg_instr -> reg_instr_name . REG COMMA IMM SEMICOLON body

    REG             shift and go to state 40


state 15

    (17) mem_instr -> mem_instr_name . REG COMMA REG SEMICOLON body
    (18) mem_instr -> mem_instr_name . REG COMMA IMM SEMICOLON body

    REG             shift and go to state 41


state 16

    (20) bra_instr -> bra_instr_name . LABEL SEMICOLON body

    LABEL           shift and go to state 42


state 17

    (24) ari_instr_name -> ADD .

    REG             reduce using rule 24 (ari_instr_name -> ADD .)


state 18

    (25) ari_instr_name -> ADDI .

    REG             reduce using rule 25 (ari_instr_name -> ADDI .)


state 19

    (26) ari_instr_name -> SUB .

    REG             reduce using rule 26 (ari_instr_name -> SUB .)


state 20

    (27) ari_instr_name -> SUBI .

    REG             reduce using rule 27 (ari_instr_name -> SUBI .)


state 21

    (28) ari_instr_name -> MUL .

    REG             reduce using rule 28 (ari_instr_name -> MUL .)


state 22

    (29) ari_instr_name -> MULI .

    REG             reduce using rule 29 (ari_instr_name -> MULI .)


state 23

    (30) reg_instr_name -> MOVI .

    REG             reduce using rule 30 (reg_instr_name -> MOVI .)


state 24

    (31) reg_instr_name -> CMP .

    REG             reduce using rule 31 (reg_instr_name -> CMP .)


state 25

    (32) reg_instr_name -> CMPI .

    REG             reduce using rule 32 (reg_instr_name -> CMPI .)


state 26

    (33) mem_instr_name -> STR .

    REG             reduce using rule 33 (mem_instr_name -> STR .)


state 27

    (34) mem_instr_name -> STRI .

    REG             reduce using rule 34 (mem_instr_name -> STRI .)


state 28

    (35) mem_instr_name -> LD .

    REG             reduce using rule 35 (mem_instr_name -> LD .)


state 29

    (36) bra_instr_name -> BGT .

    LABEL           reduce using rule 36 (bra_instr_name -> BGT .)


state 30

    (37) bra_instr_name -> BGTE .

    LABEL           reduce using rule 37 (bra_instr_name -> BGTE .)


state 31

    (38) bra_instr_name -> BE .

    LABEL           reduce using rule 38 (bra_instr_name -> BE .)


state 32

    (39) bra_instr_name -> B .

    LABEL           reduce using rule 39 (bra_instr_name -> B .)


state 33

    (40) bra_instr_name -> BRGT .

    LABEL           reduce using rule 40 (bra_instr_name -> BRGT .)


state 34

    (41) bra_instr_name -> BRGTE .

    LABEL           reduce using rule 41 (bra_instr_name -> BRGTE .)


state 35

    (42) bra_instr_name -> BRE .

    LABEL           reduce using rule 42 (bra_instr_name -> BRE .)


state 36

    (43) bra_instr_name -> BR .

    LABEL           reduce using rule 43 (bra_instr_name -> BR .)


state 37

    (4) label -> LABEL body .

    $end            reduce using rule 4 (label -> LABEL body .)


state 38

    (22) spe_instr -> STLL SEMICOLON . body
    (2) body -> . instruction
    (3) body -> . label
    (6) instruction -> . spe_instr
    (7) instruction -> . ari_instr
    (8) instruction -> . reg_instr
    (9) instruction -> . mem_instr
    (10) instruction -> . bra_instr
    (4) label -> . LABEL body
    (5) label -> . empty
    (22) spe_instr -> . STLL SEMICOLON body
    (23) spe_instr -> . empty
    (11) ari_instr -> . ari_instr_name REG COMMA REG COMMA REG SEMICOLON body
    (12) ari_instr -> . ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body
    (13) ari_instr -> . empty
    (14) reg_instr -> . reg_instr_name REG COMMA REG SEMICOLON body
    (15) reg_instr -> . reg_instr_name REG COMMA IMM SEMICOLON body
    (16) reg_instr -> . empty
    (17) mem_instr -> . mem_instr_name REG COMMA REG SEMICOLON body
    (18) mem_instr -> . mem_instr_name REG COMMA IMM SEMICOLON body
    (19) mem_instr -> . empty
    (20) bra_instr -> . bra_instr_name LABEL SEMICOLON body
    (21) bra_instr -> . empty
    (44) empty -> .
    (24) ari_instr_name -> . ADD
    (25) ari_instr_name -> . ADDI
    (26) ari_instr_name -> . SUB
    (27) ari_instr_name -> . SUBI
    (28) ari_instr_name -> . MUL
    (29) ari_instr_name -> . MULI
    (30) reg_instr_name -> . MOVI
    (31) reg_instr_name -> . CMP
    (32) reg_instr_name -> . CMPI
    (33) mem_instr_name -> . STR
    (34) mem_instr_name -> . STRI
    (35) mem_instr_name -> . LD
    (36) bra_instr_name -> . BGT
    (37) bra_instr_name -> . BGTE
    (38) bra_instr_name -> . BE
    (39) bra_instr_name -> . B
    (40) bra_instr_name -> . BRGT
    (41) bra_instr_name -> . BRGTE
    (42) bra_instr_name -> . BRE
    (43) bra_instr_name -> . BR

    LABEL           shift and go to state 10
    STLL            shift and go to state 12
    $end            reduce using rule 44 (empty -> .)
    ADD             shift and go to state 17
    ADDI            shift and go to state 18
    SUB             shift and go to state 19
    SUBI            shift and go to state 20
    MUL             shift and go to state 21
    MULI            shift and go to state 22
    MOVI            shift and go to state 23
    CMP             shift and go to state 24
    CMPI            shift and go to state 25
    STR             shift and go to state 26
    STRI            shift and go to state 27
    LD              shift and go to state 28
    BGT             shift and go to state 29
    BGTE            shift and go to state 30
    BE              shift and go to state 31
    B               shift and go to state 32
    BRGT            shift and go to state 33
    BRGTE           shift and go to state 34
    BRE             shift and go to state 35
    BR              shift and go to state 36

    body                           shift and go to state 43
    instruction                    shift and go to state 3
    label                          shift and go to state 4
    spe_instr                      shift and go to state 5
    ari_instr                      shift and go to state 6
    reg_instr                      shift and go to state 7
    mem_instr                      shift and go to state 8
    bra_instr                      shift and go to state 9
    empty                          shift and go to state 11
    ari_instr_name                 shift and go to state 13
    reg_instr_name                 shift and go to state 14
    mem_instr_name                 shift and go to state 15
    bra_instr_name                 shift and go to state 16

state 39

    (11) ari_instr -> ari_instr_name REG . COMMA REG COMMA REG SEMICOLON body
    (12) ari_instr -> ari_instr_name REG . COMMA REG COMMA IMM SEMICOLON body

    COMMA           shift and go to state 44


state 40

    (14) reg_instr -> reg_instr_name REG . COMMA REG SEMICOLON body
    (15) reg_instr -> reg_instr_name REG . COMMA IMM SEMICOLON body

    COMMA           shift and go to state 45


state 41

    (17) mem_instr -> mem_instr_name REG . COMMA REG SEMICOLON body
    (18) mem_instr -> mem_instr_name REG . COMMA IMM SEMICOLON body

    COMMA           shift and go to state 46


state 42

    (20) bra_instr -> bra_instr_name LABEL . SEMICOLON body

    SEMICOLON       shift and go to state 47


state 43

    (22) spe_instr -> STLL SEMICOLON body .

    $end            reduce using rule 22 (spe_instr -> STLL SEMICOLON body .)


state 44

    (11) ari_instr -> ari_instr_name REG COMMA . REG COMMA REG SEMICOLON body
    (12) ari_instr -> ari_instr_name REG COMMA . REG COMMA IMM SEMICOLON body

    REG             shift and go to state 48


state 45

    (14) reg_instr -> reg_instr_name REG COMMA . REG SEMICOLON body
    (15) reg_instr -> reg_instr_name REG COMMA . IMM SEMICOLON body

    REG             shift and go to state 49
    IMM             shift and go to state 50


state 46

    (17) mem_instr -> mem_instr_name REG COMMA . REG SEMICOLON body
    (18) mem_instr -> mem_instr_name REG COMMA . IMM SEMICOLON body

    REG             shift and go to state 51
    IMM             shift and go to state 52


state 47

    (20) bra_instr -> bra_instr_name LABEL SEMICOLON . body
    (2) body -> . instruction
    (3) body -> . label
    (6) instruction -> . spe_instr
    (7) instruction -> . ari_instr
    (8) instruction -> . reg_instr
    (9) instruction -> . mem_instr
    (10) instruction -> . bra_instr
    (4) label -> . LABEL body
    (5) label -> . empty
    (22) spe_instr -> . STLL SEMICOLON body
    (23) spe_instr -> . empty
    (11) ari_instr -> . ari_instr_name REG COMMA REG COMMA REG SEMICOLON body
    (12) ari_instr -> . ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body
    (13) ari_instr -> . empty
    (14) reg_instr -> . reg_instr_name REG COMMA REG SEMICOLON body
    (15) reg_instr -> . reg_instr_name REG COMMA IMM SEMICOLON body
    (16) reg_instr -> . empty
    (17) mem_instr -> . mem_instr_name REG COMMA REG SEMICOLON body
    (18) mem_instr -> . mem_instr_name REG COMMA IMM SEMICOLON body
    (19) mem_instr -> . empty
    (20) bra_instr -> . bra_instr_name LABEL SEMICOLON body
    (21) bra_instr -> . empty
    (44) empty -> .
    (24) ari_instr_name -> . ADD
    (25) ari_instr_name -> . ADDI
    (26) ari_instr_name -> . SUB
    (27) ari_instr_name -> . SUBI
    (28) ari_instr_name -> . MUL
    (29) ari_instr_name -> . MULI
    (30) reg_instr_name -> . MOVI
    (31) reg_instr_name -> . CMP
    (32) reg_instr_name -> . CMPI
    (33) mem_instr_name -> . STR
    (34) mem_instr_name -> . STRI
    (35) mem_instr_name -> . LD
    (36) bra_instr_name -> . BGT
    (37) bra_instr_name -> . BGTE
    (38) bra_instr_name -> . BE
    (39) bra_instr_name -> . B
    (40) bra_instr_name -> . BRGT
    (41) bra_instr_name -> . BRGTE
    (42) bra_instr_name -> . BRE
    (43) bra_instr_name -> . BR

    LABEL           shift and go to state 10
    STLL            shift and go to state 12
    $end            reduce using rule 44 (empty -> .)
    ADD             shift and go to state 17
    ADDI            shift and go to state 18
    SUB             shift and go to state 19
    SUBI            shift and go to state 20
    MUL             shift and go to state 21
    MULI            shift and go to state 22
    MOVI            shift and go to state 23
    CMP             shift and go to state 24
    CMPI            shift and go to state 25
    STR             shift and go to state 26
    STRI            shift and go to state 27
    LD              shift and go to state 28
    BGT             shift and go to state 29
    BGTE            shift and go to state 30
    BE              shift and go to state 31
    B               shift and go to state 32
    BRGT            shift and go to state 33
    BRGTE           shift and go to state 34
    BRE             shift and go to state 35
    BR              shift and go to state 36

    bra_instr_name                 shift and go to state 16
    body                           shift and go to state 53
    instruction                    shift and go to state 3
    label                          shift and go to state 4
    spe_instr                      shift and go to state 5
    ari_instr                      shift and go to state 6
    reg_instr                      shift and go to state 7
    mem_instr                      shift and go to state 8
    bra_instr                      shift and go to state 9
    empty                          shift and go to state 11
    ari_instr_name                 shift and go to state 13
    reg_instr_name                 shift and go to state 14
    mem_instr_name                 shift and go to state 15

state 48

    (11) ari_instr -> ari_instr_name REG COMMA REG . COMMA REG SEMICOLON body
    (12) ari_instr -> ari_instr_name REG COMMA REG . COMMA IMM SEMICOLON body

    COMMA           shift and go to state 54


state 49

    (14) reg_instr -> reg_instr_name REG COMMA REG . SEMICOLON body

    SEMICOLON       shift and go to state 55


state 50

    (15) reg_instr -> reg_instr_name REG COMMA IMM . SEMICOLON body

    SEMICOLON       shift and go to state 56


state 51

    (17) mem_instr -> mem_instr_name REG COMMA REG . SEMICOLON body

    SEMICOLON       shift and go to state 57


state 52

    (18) mem_instr -> mem_instr_name REG COMMA IMM . SEMICOLON body

    SEMICOLON       shift and go to state 58


state 53

    (20) bra_instr -> bra_instr_name LABEL SEMICOLON body .

    $end            reduce using rule 20 (bra_instr -> bra_instr_name LABEL SEMICOLON body .)


state 54

    (11) ari_instr -> ari_instr_name REG COMMA REG COMMA . REG SEMICOLON body
    (12) ari_instr -> ari_instr_name REG COMMA REG COMMA . IMM SEMICOLON body

    REG             shift and go to state 59
    IMM             shift and go to state 60


state 55

    (14) reg_instr -> reg_instr_name REG COMMA REG SEMICOLON . body
    (2) body -> . instruction
    (3) body -> . label
    (6) instruction -> . spe_instr
    (7) instruction -> . ari_instr
    (8) instruction -> . reg_instr
    (9) instruction -> . mem_instr
    (10) instruction -> . bra_instr
    (4) label -> . LABEL body
    (5) label -> . empty
    (22) spe_instr -> . STLL SEMICOLON body
    (23) spe_instr -> . empty
    (11) ari_instr -> . ari_instr_name REG COMMA REG COMMA REG SEMICOLON body
    (12) ari_instr -> . ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body
    (13) ari_instr -> . empty
    (14) reg_instr -> . reg_instr_name REG COMMA REG SEMICOLON body
    (15) reg_instr -> . reg_instr_name REG COMMA IMM SEMICOLON body
    (16) reg_instr -> . empty
    (17) mem_instr -> . mem_instr_name REG COMMA REG SEMICOLON body
    (18) mem_instr -> . mem_instr_name REG COMMA IMM SEMICOLON body
    (19) mem_instr -> . empty
    (20) bra_instr -> . bra_instr_name LABEL SEMICOLON body
    (21) bra_instr -> . empty
    (44) empty -> .
    (24) ari_instr_name -> . ADD
    (25) ari_instr_name -> . ADDI
    (26) ari_instr_name -> . SUB
    (27) ari_instr_name -> . SUBI
    (28) ari_instr_name -> . MUL
    (29) ari_instr_name -> . MULI
    (30) reg_instr_name -> . MOVI
    (31) reg_instr_name -> . CMP
    (32) reg_instr_name -> . CMPI
    (33) mem_instr_name -> . STR
    (34) mem_instr_name -> . STRI
    (35) mem_instr_name -> . LD
    (36) bra_instr_name -> . BGT
    (37) bra_instr_name -> . BGTE
    (38) bra_instr_name -> . BE
    (39) bra_instr_name -> . B
    (40) bra_instr_name -> . BRGT
    (41) bra_instr_name -> . BRGTE
    (42) bra_instr_name -> . BRE
    (43) bra_instr_name -> . BR

    LABEL           shift and go to state 10
    STLL            shift and go to state 12
    $end            reduce using rule 44 (empty -> .)
    ADD             shift and go to state 17
    ADDI            shift and go to state 18
    SUB             shift and go to state 19
    SUBI            shift and go to state 20
    MUL             shift and go to state 21
    MULI            shift and go to state 22
    MOVI            shift and go to state 23
    CMP             shift and go to state 24
    CMPI            shift and go to state 25
    STR             shift and go to state 26
    STRI            shift and go to state 27
    LD              shift and go to state 28
    BGT             shift and go to state 29
    BGTE            shift and go to state 30
    BE              shift and go to state 31
    B               shift and go to state 32
    BRGT            shift and go to state 33
    BRGTE           shift and go to state 34
    BRE             shift and go to state 35
    BR              shift and go to state 36

    reg_instr_name                 shift and go to state 14
    body                           shift and go to state 61
    instruction                    shift and go to state 3
    label                          shift and go to state 4
    spe_instr                      shift and go to state 5
    ari_instr                      shift and go to state 6
    reg_instr                      shift and go to state 7
    mem_instr                      shift and go to state 8
    bra_instr                      shift and go to state 9
    empty                          shift and go to state 11
    ari_instr_name                 shift and go to state 13
    mem_instr_name                 shift and go to state 15
    bra_instr_name                 shift and go to state 16

state 56

    (15) reg_instr -> reg_instr_name REG COMMA IMM SEMICOLON . body
    (2) body -> . instruction
    (3) body -> . label
    (6) instruction -> . spe_instr
    (7) instruction -> . ari_instr
    (8) instruction -> . reg_instr
    (9) instruction -> . mem_instr
    (10) instruction -> . bra_instr
    (4) label -> . LABEL body
    (5) label -> . empty
    (22) spe_instr -> . STLL SEMICOLON body
    (23) spe_instr -> . empty
    (11) ari_instr -> . ari_instr_name REG COMMA REG COMMA REG SEMICOLON body
    (12) ari_instr -> . ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body
    (13) ari_instr -> . empty
    (14) reg_instr -> . reg_instr_name REG COMMA REG SEMICOLON body
    (15) reg_instr -> . reg_instr_name REG COMMA IMM SEMICOLON body
    (16) reg_instr -> . empty
    (17) mem_instr -> . mem_instr_name REG COMMA REG SEMICOLON body
    (18) mem_instr -> . mem_instr_name REG COMMA IMM SEMICOLON body
    (19) mem_instr -> . empty
    (20) bra_instr -> . bra_instr_name LABEL SEMICOLON body
    (21) bra_instr -> . empty
    (44) empty -> .
    (24) ari_instr_name -> . ADD
    (25) ari_instr_name -> . ADDI
    (26) ari_instr_name -> . SUB
    (27) ari_instr_name -> . SUBI
    (28) ari_instr_name -> . MUL
    (29) ari_instr_name -> . MULI
    (30) reg_instr_name -> . MOVI
    (31) reg_instr_name -> . CMP
    (32) reg_instr_name -> . CMPI
    (33) mem_instr_name -> . STR
    (34) mem_instr_name -> . STRI
    (35) mem_instr_name -> . LD
    (36) bra_instr_name -> . BGT
    (37) bra_instr_name -> . BGTE
    (38) bra_instr_name -> . BE
    (39) bra_instr_name -> . B
    (40) bra_instr_name -> . BRGT
    (41) bra_instr_name -> . BRGTE
    (42) bra_instr_name -> . BRE
    (43) bra_instr_name -> . BR

    LABEL           shift and go to state 10
    STLL            shift and go to state 12
    $end            reduce using rule 44 (empty -> .)
    ADD             shift and go to state 17
    ADDI            shift and go to state 18
    SUB             shift and go to state 19
    SUBI            shift and go to state 20
    MUL             shift and go to state 21
    MULI            shift and go to state 22
    MOVI            shift and go to state 23
    CMP             shift and go to state 24
    CMPI            shift and go to state 25
    STR             shift and go to state 26
    STRI            shift and go to state 27
    LD              shift and go to state 28
    BGT             shift and go to state 29
    BGTE            shift and go to state 30
    BE              shift and go to state 31
    B               shift and go to state 32
    BRGT            shift and go to state 33
    BRGTE           shift and go to state 34
    BRE             shift and go to state 35
    BR              shift and go to state 36

    reg_instr_name                 shift and go to state 14
    body                           shift and go to state 62
    instruction                    shift and go to state 3
    label                          shift and go to state 4
    spe_instr                      shift and go to state 5
    ari_instr                      shift and go to state 6
    reg_instr                      shift and go to state 7
    mem_instr                      shift and go to state 8
    bra_instr                      shift and go to state 9
    empty                          shift and go to state 11
    ari_instr_name                 shift and go to state 13
    mem_instr_name                 shift and go to state 15
    bra_instr_name                 shift and go to state 16

state 57

    (17) mem_instr -> mem_instr_name REG COMMA REG SEMICOLON . body
    (2) body -> . instruction
    (3) body -> . label
    (6) instruction -> . spe_instr
    (7) instruction -> . ari_instr
    (8) instruction -> . reg_instr
    (9) instruction -> . mem_instr
    (10) instruction -> . bra_instr
    (4) label -> . LABEL body
    (5) label -> . empty
    (22) spe_instr -> . STLL SEMICOLON body
    (23) spe_instr -> . empty
    (11) ari_instr -> . ari_instr_name REG COMMA REG COMMA REG SEMICOLON body
    (12) ari_instr -> . ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body
    (13) ari_instr -> . empty
    (14) reg_instr -> . reg_instr_name REG COMMA REG SEMICOLON body
    (15) reg_instr -> . reg_instr_name REG COMMA IMM SEMICOLON body
    (16) reg_instr -> . empty
    (17) mem_instr -> . mem_instr_name REG COMMA REG SEMICOLON body
    (18) mem_instr -> . mem_instr_name REG COMMA IMM SEMICOLON body
    (19) mem_instr -> . empty
    (20) bra_instr -> . bra_instr_name LABEL SEMICOLON body
    (21) bra_instr -> . empty
    (44) empty -> .
    (24) ari_instr_name -> . ADD
    (25) ari_instr_name -> . ADDI
    (26) ari_instr_name -> . SUB
    (27) ari_instr_name -> . SUBI
    (28) ari_instr_name -> . MUL
    (29) ari_instr_name -> . MULI
    (30) reg_instr_name -> . MOVI
    (31) reg_instr_name -> . CMP
    (32) reg_instr_name -> . CMPI
    (33) mem_instr_name -> . STR
    (34) mem_instr_name -> . STRI
    (35) mem_instr_name -> . LD
    (36) bra_instr_name -> . BGT
    (37) bra_instr_name -> . BGTE
    (38) bra_instr_name -> . BE
    (39) bra_instr_name -> . B
    (40) bra_instr_name -> . BRGT
    (41) bra_instr_name -> . BRGTE
    (42) bra_instr_name -> . BRE
    (43) bra_instr_name -> . BR

    LABEL           shift and go to state 10
    STLL            shift and go to state 12
    $end            reduce using rule 44 (empty -> .)
    ADD             shift and go to state 17
    ADDI            shift and go to state 18
    SUB             shift and go to state 19
    SUBI            shift and go to state 20
    MUL             shift and go to state 21
    MULI            shift and go to state 22
    MOVI            shift and go to state 23
    CMP             shift and go to state 24
    CMPI            shift and go to state 25
    STR             shift and go to state 26
    STRI            shift and go to state 27
    LD              shift and go to state 28
    BGT             shift and go to state 29
    BGTE            shift and go to state 30
    BE              shift and go to state 31
    B               shift and go to state 32
    BRGT            shift and go to state 33
    BRGTE           shift and go to state 34
    BRE             shift and go to state 35
    BR              shift and go to state 36

    mem_instr_name                 shift and go to state 15
    body                           shift and go to state 63
    instruction                    shift and go to state 3
    label                          shift and go to state 4
    spe_instr                      shift and go to state 5
    ari_instr                      shift and go to state 6
    reg_instr                      shift and go to state 7
    mem_instr                      shift and go to state 8
    bra_instr                      shift and go to state 9
    empty                          shift and go to state 11
    ari_instr_name                 shift and go to state 13
    reg_instr_name                 shift and go to state 14
    bra_instr_name                 shift and go to state 16

state 58

    (18) mem_instr -> mem_instr_name REG COMMA IMM SEMICOLON . body
    (2) body -> . instruction
    (3) body -> . label
    (6) instruction -> . spe_instr
    (7) instruction -> . ari_instr
    (8) instruction -> . reg_instr
    (9) instruction -> . mem_instr
    (10) instruction -> . bra_instr
    (4) label -> . LABEL body
    (5) label -> . empty
    (22) spe_instr -> . STLL SEMICOLON body
    (23) spe_instr -> . empty
    (11) ari_instr -> . ari_instr_name REG COMMA REG COMMA REG SEMICOLON body
    (12) ari_instr -> . ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body
    (13) ari_instr -> . empty
    (14) reg_instr -> . reg_instr_name REG COMMA REG SEMICOLON body
    (15) reg_instr -> . reg_instr_name REG COMMA IMM SEMICOLON body
    (16) reg_instr -> . empty
    (17) mem_instr -> . mem_instr_name REG COMMA REG SEMICOLON body
    (18) mem_instr -> . mem_instr_name REG COMMA IMM SEMICOLON body
    (19) mem_instr -> . empty
    (20) bra_instr -> . bra_instr_name LABEL SEMICOLON body
    (21) bra_instr -> . empty
    (44) empty -> .
    (24) ari_instr_name -> . ADD
    (25) ari_instr_name -> . ADDI
    (26) ari_instr_name -> . SUB
    (27) ari_instr_name -> . SUBI
    (28) ari_instr_name -> . MUL
    (29) ari_instr_name -> . MULI
    (30) reg_instr_name -> . MOVI
    (31) reg_instr_name -> . CMP
    (32) reg_instr_name -> . CMPI
    (33) mem_instr_name -> . STR
    (34) mem_instr_name -> . STRI
    (35) mem_instr_name -> . LD
    (36) bra_instr_name -> . BGT
    (37) bra_instr_name -> . BGTE
    (38) bra_instr_name -> . BE
    (39) bra_instr_name -> . B
    (40) bra_instr_name -> . BRGT
    (41) bra_instr_name -> . BRGTE
    (42) bra_instr_name -> . BRE
    (43) bra_instr_name -> . BR

    LABEL           shift and go to state 10
    STLL            shift and go to state 12
    $end            reduce using rule 44 (empty -> .)
    ADD             shift and go to state 17
    ADDI            shift and go to state 18
    SUB             shift and go to state 19
    SUBI            shift and go to state 20
    MUL             shift and go to state 21
    MULI            shift and go to state 22
    MOVI            shift and go to state 23
    CMP             shift and go to state 24
    CMPI            shift and go to state 25
    STR             shift and go to state 26
    STRI            shift and go to state 27
    LD              shift and go to state 28
    BGT             shift and go to state 29
    BGTE            shift and go to state 30
    BE              shift and go to state 31
    B               shift and go to state 32
    BRGT            shift and go to state 33
    BRGTE           shift and go to state 34
    BRE             shift and go to state 35
    BR              shift and go to state 36

    mem_instr_name                 shift and go to state 15
    body                           shift and go to state 64
    instruction                    shift and go to state 3
    label                          shift and go to state 4
    spe_instr                      shift and go to state 5
    ari_instr                      shift and go to state 6
    reg_instr                      shift and go to state 7
    mem_instr                      shift and go to state 8
    bra_instr                      shift and go to state 9
    empty                          shift and go to state 11
    ari_instr_name                 shift and go to state 13
    reg_instr_name                 shift and go to state 14
    bra_instr_name                 shift and go to state 16

state 59

    (11) ari_instr -> ari_instr_name REG COMMA REG COMMA REG . SEMICOLON body

    SEMICOLON       shift and go to state 65


state 60

    (12) ari_instr -> ari_instr_name REG COMMA REG COMMA IMM . SEMICOLON body

    SEMICOLON       shift and go to state 66


state 61

    (14) reg_instr -> reg_instr_name REG COMMA REG SEMICOLON body .

    $end            reduce using rule 14 (reg_instr -> reg_instr_name REG COMMA REG SEMICOLON body .)


state 62

    (15) reg_instr -> reg_instr_name REG COMMA IMM SEMICOLON body .

    $end            reduce using rule 15 (reg_instr -> reg_instr_name REG COMMA IMM SEMICOLON body .)


state 63

    (17) mem_instr -> mem_instr_name REG COMMA REG SEMICOLON body .

    $end            reduce using rule 17 (mem_instr -> mem_instr_name REG COMMA REG SEMICOLON body .)


state 64

    (18) mem_instr -> mem_instr_name REG COMMA IMM SEMICOLON body .

    $end            reduce using rule 18 (mem_instr -> mem_instr_name REG COMMA IMM SEMICOLON body .)


state 65

    (11) ari_instr -> ari_instr_name REG COMMA REG COMMA REG SEMICOLON . body
    (2) body -> . instruction
    (3) body -> . label
    (6) instruction -> . spe_instr
    (7) instruction -> . ari_instr
    (8) instruction -> . reg_instr
    (9) instruction -> . mem_instr
    (10) instruction -> . bra_instr
    (4) label -> . LABEL body
    (5) label -> . empty
    (22) spe_instr -> . STLL SEMICOLON body
    (23) spe_instr -> . empty
    (11) ari_instr -> . ari_instr_name REG COMMA REG COMMA REG SEMICOLON body
    (12) ari_instr -> . ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body
    (13) ari_instr -> . empty
    (14) reg_instr -> . reg_instr_name REG COMMA REG SEMICOLON body
    (15) reg_instr -> . reg_instr_name REG COMMA IMM SEMICOLON body
    (16) reg_instr -> . empty
    (17) mem_instr -> . mem_instr_name REG COMMA REG SEMICOLON body
    (18) mem_instr -> . mem_instr_name REG COMMA IMM SEMICOLON body
    (19) mem_instr -> . empty
    (20) bra_instr -> . bra_instr_name LABEL SEMICOLON body
    (21) bra_instr -> . empty
    (44) empty -> .
    (24) ari_instr_name -> . ADD
    (25) ari_instr_name -> . ADDI
    (26) ari_instr_name -> . SUB
    (27) ari_instr_name -> . SUBI
    (28) ari_instr_name -> . MUL
    (29) ari_instr_name -> . MULI
    (30) reg_instr_name -> . MOVI
    (31) reg_instr_name -> . CMP
    (32) reg_instr_name -> . CMPI
    (33) mem_instr_name -> . STR
    (34) mem_instr_name -> . STRI
    (35) mem_instr_name -> . LD
    (36) bra_instr_name -> . BGT
    (37) bra_instr_name -> . BGTE
    (38) bra_instr_name -> . BE
    (39) bra_instr_name -> . B
    (40) bra_instr_name -> . BRGT
    (41) bra_instr_name -> . BRGTE
    (42) bra_instr_name -> . BRE
    (43) bra_instr_name -> . BR

    LABEL           shift and go to state 10
    STLL            shift and go to state 12
    $end            reduce using rule 44 (empty -> .)
    ADD             shift and go to state 17
    ADDI            shift and go to state 18
    SUB             shift and go to state 19
    SUBI            shift and go to state 20
    MUL             shift and go to state 21
    MULI            shift and go to state 22
    MOVI            shift and go to state 23
    CMP             shift and go to state 24
    CMPI            shift and go to state 25
    STR             shift and go to state 26
    STRI            shift and go to state 27
    LD              shift and go to state 28
    BGT             shift and go to state 29
    BGTE            shift and go to state 30
    BE              shift and go to state 31
    B               shift and go to state 32
    BRGT            shift and go to state 33
    BRGTE           shift and go to state 34
    BRE             shift and go to state 35
    BR              shift and go to state 36

    ari_instr_name                 shift and go to state 13
    body                           shift and go to state 67
    instruction                    shift and go to state 3
    label                          shift and go to state 4
    spe_instr                      shift and go to state 5
    ari_instr                      shift and go to state 6
    reg_instr                      shift and go to state 7
    mem_instr                      shift and go to state 8
    bra_instr                      shift and go to state 9
    empty                          shift and go to state 11
    reg_instr_name                 shift and go to state 14
    mem_instr_name                 shift and go to state 15
    bra_instr_name                 shift and go to state 16

state 66

    (12) ari_instr -> ari_instr_name REG COMMA REG COMMA IMM SEMICOLON . body
    (2) body -> . instruction
    (3) body -> . label
    (6) instruction -> . spe_instr
    (7) instruction -> . ari_instr
    (8) instruction -> . reg_instr
    (9) instruction -> . mem_instr
    (10) instruction -> . bra_instr
    (4) label -> . LABEL body
    (5) label -> . empty
    (22) spe_instr -> . STLL SEMICOLON body
    (23) spe_instr -> . empty
    (11) ari_instr -> . ari_instr_name REG COMMA REG COMMA REG SEMICOLON body
    (12) ari_instr -> . ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body
    (13) ari_instr -> . empty
    (14) reg_instr -> . reg_instr_name REG COMMA REG SEMICOLON body
    (15) reg_instr -> . reg_instr_name REG COMMA IMM SEMICOLON body
    (16) reg_instr -> . empty
    (17) mem_instr -> . mem_instr_name REG COMMA REG SEMICOLON body
    (18) mem_instr -> . mem_instr_name REG COMMA IMM SEMICOLON body
    (19) mem_instr -> . empty
    (20) bra_instr -> . bra_instr_name LABEL SEMICOLON body
    (21) bra_instr -> . empty
    (44) empty -> .
    (24) ari_instr_name -> . ADD
    (25) ari_instr_name -> . ADDI
    (26) ari_instr_name -> . SUB
    (27) ari_instr_name -> . SUBI
    (28) ari_instr_name -> . MUL
    (29) ari_instr_name -> . MULI
    (30) reg_instr_name -> . MOVI
    (31) reg_instr_name -> . CMP
    (32) reg_instr_name -> . CMPI
    (33) mem_instr_name -> . STR
    (34) mem_instr_name -> . STRI
    (35) mem_instr_name -> . LD
    (36) bra_instr_name -> . BGT
    (37) bra_instr_name -> . BGTE
    (38) bra_instr_name -> . BE
    (39) bra_instr_name -> . B
    (40) bra_instr_name -> . BRGT
    (41) bra_instr_name -> . BRGTE
    (42) bra_instr_name -> . BRE
    (43) bra_instr_name -> . BR

    LABEL           shift and go to state 10
    STLL            shift and go to state 12
    $end            reduce using rule 44 (empty -> .)
    ADD             shift and go to state 17
    ADDI            shift and go to state 18
    SUB             shift and go to state 19
    SUBI            shift and go to state 20
    MUL             shift and go to state 21
    MULI            shift and go to state 22
    MOVI            shift and go to state 23
    CMP             shift and go to state 24
    CMPI            shift and go to state 25
    STR             shift and go to state 26
    STRI            shift and go to state 27
    LD              shift and go to state 28
    BGT             shift and go to state 29
    BGTE            shift and go to state 30
    BE              shift and go to state 31
    B               shift and go to state 32
    BRGT            shift and go to state 33
    BRGTE           shift and go to state 34
    BRE             shift and go to state 35
    BR              shift and go to state 36

    ari_instr_name                 shift and go to state 13
    body                           shift and go to state 68
    instruction                    shift and go to state 3
    label                          shift and go to state 4
    spe_instr                      shift and go to state 5
    ari_instr                      shift and go to state 6
    reg_instr                      shift and go to state 7
    mem_instr                      shift and go to state 8
    bra_instr                      shift and go to state 9
    empty                          shift and go to state 11
    reg_instr_name                 shift and go to state 14
    mem_instr_name                 shift and go to state 15
    bra_instr_name                 shift and go to state 16

state 67

    (11) ari_instr -> ari_instr_name REG COMMA REG COMMA REG SEMICOLON body .

    $end            reduce using rule 11 (ari_instr -> ari_instr_name REG COMMA REG COMMA REG SEMICOLON body .)


state 68

    (12) ari_instr -> ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body .

    $end            reduce using rule 12 (ari_instr -> ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 11 resolved using rule (label -> empty)
WARNING: rejected rule (spe_instr -> empty) in state 11
WARNING: reduce/reduce conflict in state 11 resolved using rule (label -> empty)
WARNING: rejected rule (ari_instr -> empty) in state 11
WARNING: reduce/reduce conflict in state 11 resolved using rule (label -> empty)
WARNING: rejected rule (reg_instr -> empty) in state 11
WARNING: reduce/reduce conflict in state 11 resolved using rule (label -> empty)
WARNING: rejected rule (mem_instr -> empty) in state 11
WARNING: reduce/reduce conflict in state 11 resolved using rule (label -> empty)
WARNING: rejected rule (bra_instr -> empty) in state 11
WARNING: Rule (spe_instr -> empty) is never reduced
WARNING: Rule (ari_instr -> empty) is never reduced
WARNING: Rule (reg_instr -> empty) is never reduced
WARNING: Rule (mem_instr -> empty) is never reduced
WARNING: Rule (bra_instr -> empty) is never reduced

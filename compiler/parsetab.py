
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ADDI B BE BGT BGTE BR BRE BRGT BRGTE CMP CMPI COMMA IMM LABEL LD MOVI MUL MULI REG SEMICOLON STLL STR STRI SUB SUBI\n    code : body\n    \n    body : instruction\n         | label\n    \n    label : LABEL body\n          | empty\n    \n    instruction : spe_instr\n                | ari_instr\n                | reg_instr\n                | mem_instr\n                | bra_instr\n    \n    ari_instr : ari_instr_name REG COMMA REG COMMA REG SEMICOLON body\n              | ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body\n              | empty\n    \n    reg_instr : reg_instr_name REG COMMA REG SEMICOLON body\n              | reg_instr_name REG COMMA IMM SEMICOLON body\n              | empty\n    \n    mem_instr : mem_instr_name REG COMMA REG SEMICOLON body\n              | mem_instr_name REG COMMA IMM SEMICOLON body\n              | empty\n    \n    bra_instr : bra_instr_name LABEL SEMICOLON body\n              | empty\n    \n    spe_instr : STLL SEMICOLON body\n              | empty\n    \n    ari_instr_name : ADD\n                   | ADDI\n                   | SUB\n                   | SUBI\n                   | MUL\n                   | MULI\n    \n    reg_instr_name : MOVI\n                   | CMP\n                   | CMPI\n\n    \n    mem_instr_name : STR\n                   | STRI\n                   | LD\n    \n    bra_instr_name : BGT\n                   | BGTE\n                   | BE\n                   | B\n                   | BRGT\n                   | BRGTE\n                   | BRE\n                   | BR\n    \n    empty :\n    '
    
_lr_action_items = {'LABEL':([0,10,16,29,30,31,32,33,34,35,36,38,47,55,56,57,58,65,66,],[10,10,42,-36,-37,-38,-39,-40,-41,-42,-43,10,10,10,10,10,10,10,10,]),'STLL':([0,10,38,47,55,56,57,58,65,66,],[12,12,12,12,12,12,12,12,12,12,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,37,38,43,47,53,55,56,57,58,61,62,63,64,65,66,67,68,],[-44,0,-1,-2,-3,-6,-7,-8,-9,-10,-44,-5,-4,-44,-22,-44,-20,-44,-44,-44,-44,-14,-15,-17,-18,-44,-44,-11,-12,]),'ADD':([0,10,38,47,55,56,57,58,65,66,],[17,17,17,17,17,17,17,17,17,17,]),'ADDI':([0,10,38,47,55,56,57,58,65,66,],[18,18,18,18,18,18,18,18,18,18,]),'SUB':([0,10,38,47,55,56,57,58,65,66,],[19,19,19,19,19,19,19,19,19,19,]),'SUBI':([0,10,38,47,55,56,57,58,65,66,],[20,20,20,20,20,20,20,20,20,20,]),'MUL':([0,10,38,47,55,56,57,58,65,66,],[21,21,21,21,21,21,21,21,21,21,]),'MULI':([0,10,38,47,55,56,57,58,65,66,],[22,22,22,22,22,22,22,22,22,22,]),'MOVI':([0,10,38,47,55,56,57,58,65,66,],[23,23,23,23,23,23,23,23,23,23,]),'CMP':([0,10,38,47,55,56,57,58,65,66,],[24,24,24,24,24,24,24,24,24,24,]),'CMPI':([0,10,38,47,55,56,57,58,65,66,],[25,25,25,25,25,25,25,25,25,25,]),'STR':([0,10,38,47,55,56,57,58,65,66,],[26,26,26,26,26,26,26,26,26,26,]),'STRI':([0,10,38,47,55,56,57,58,65,66,],[27,27,27,27,27,27,27,27,27,27,]),'LD':([0,10,38,47,55,56,57,58,65,66,],[28,28,28,28,28,28,28,28,28,28,]),'BGT':([0,10,38,47,55,56,57,58,65,66,],[29,29,29,29,29,29,29,29,29,29,]),'BGTE':([0,10,38,47,55,56,57,58,65,66,],[30,30,30,30,30,30,30,30,30,30,]),'BE':([0,10,38,47,55,56,57,58,65,66,],[31,31,31,31,31,31,31,31,31,31,]),'B':([0,10,38,47,55,56,57,58,65,66,],[32,32,32,32,32,32,32,32,32,32,]),'BRGT':([0,10,38,47,55,56,57,58,65,66,],[33,33,33,33,33,33,33,33,33,33,]),'BRGTE':([0,10,38,47,55,56,57,58,65,66,],[34,34,34,34,34,34,34,34,34,34,]),'BRE':([0,10,38,47,55,56,57,58,65,66,],[35,35,35,35,35,35,35,35,35,35,]),'BR':([0,10,38,47,55,56,57,58,65,66,],[36,36,36,36,36,36,36,36,36,36,]),'SEMICOLON':([12,42,49,50,51,52,59,60,],[38,47,55,56,57,58,65,66,]),'REG':([13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,44,45,46,54,],[39,40,41,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,48,49,51,59,]),'COMMA':([39,40,41,48,],[44,45,46,54,]),'IMM':([45,46,54,],[50,52,60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,],[1,]),'body':([0,10,38,47,55,56,57,58,65,66,],[2,37,43,53,61,62,63,64,67,68,]),'instruction':([0,10,38,47,55,56,57,58,65,66,],[3,3,3,3,3,3,3,3,3,3,]),'label':([0,10,38,47,55,56,57,58,65,66,],[4,4,4,4,4,4,4,4,4,4,]),'spe_instr':([0,10,38,47,55,56,57,58,65,66,],[5,5,5,5,5,5,5,5,5,5,]),'ari_instr':([0,10,38,47,55,56,57,58,65,66,],[6,6,6,6,6,6,6,6,6,6,]),'reg_instr':([0,10,38,47,55,56,57,58,65,66,],[7,7,7,7,7,7,7,7,7,7,]),'mem_instr':([0,10,38,47,55,56,57,58,65,66,],[8,8,8,8,8,8,8,8,8,8,]),'bra_instr':([0,10,38,47,55,56,57,58,65,66,],[9,9,9,9,9,9,9,9,9,9,]),'empty':([0,10,38,47,55,56,57,58,65,66,],[11,11,11,11,11,11,11,11,11,11,]),'ari_instr_name':([0,10,38,47,55,56,57,58,65,66,],[13,13,13,13,13,13,13,13,13,13,]),'reg_instr_name':([0,10,38,47,55,56,57,58,65,66,],[14,14,14,14,14,14,14,14,14,14,]),'mem_instr_name':([0,10,38,47,55,56,57,58,65,66,],[15,15,15,15,15,15,15,15,15,15,]),'bra_instr_name':([0,10,38,47,55,56,57,58,65,66,],[16,16,16,16,16,16,16,16,16,16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> body','code',1,'p_code','Syntaxer.py',12),
  ('body -> instruction','body',1,'p_body','Syntaxer.py',19),
  ('body -> label','body',1,'p_body','Syntaxer.py',20),
  ('label -> LABEL body','label',2,'p_label','Syntaxer.py',28),
  ('label -> empty','label',1,'p_label','Syntaxer.py',29),
  ('instruction -> spe_instr','instruction',1,'p_instruction','Syntaxer.py',42),
  ('instruction -> ari_instr','instruction',1,'p_instruction','Syntaxer.py',43),
  ('instruction -> reg_instr','instruction',1,'p_instruction','Syntaxer.py',44),
  ('instruction -> mem_instr','instruction',1,'p_instruction','Syntaxer.py',45),
  ('instruction -> bra_instr','instruction',1,'p_instruction','Syntaxer.py',46),
  ('ari_instr -> ari_instr_name REG COMMA REG COMMA REG SEMICOLON body','ari_instr',8,'p_ari_instr','Syntaxer.py',54),
  ('ari_instr -> ari_instr_name REG COMMA REG COMMA IMM SEMICOLON body','ari_instr',8,'p_ari_instr','Syntaxer.py',55),
  ('ari_instr -> empty','ari_instr',1,'p_ari_instr','Syntaxer.py',56),
  ('reg_instr -> reg_instr_name REG COMMA REG SEMICOLON body','reg_instr',6,'p_reg_instr','Syntaxer.py',68),
  ('reg_instr -> reg_instr_name REG COMMA IMM SEMICOLON body','reg_instr',6,'p_reg_instr','Syntaxer.py',69),
  ('reg_instr -> empty','reg_instr',1,'p_reg_instr','Syntaxer.py',70),
  ('mem_instr -> mem_instr_name REG COMMA REG SEMICOLON body','mem_instr',6,'p_mem_instr','Syntaxer.py',79),
  ('mem_instr -> mem_instr_name REG COMMA IMM SEMICOLON body','mem_instr',6,'p_mem_instr','Syntaxer.py',80),
  ('mem_instr -> empty','mem_instr',1,'p_mem_instr','Syntaxer.py',81),
  ('bra_instr -> bra_instr_name LABEL SEMICOLON body','bra_instr',4,'p_bra_instr','Syntaxer.py',90),
  ('bra_instr -> empty','bra_instr',1,'p_bra_instr','Syntaxer.py',91),
  ('spe_instr -> STLL SEMICOLON body','spe_instr',3,'p_spe_instr','Syntaxer.py',100),
  ('spe_instr -> empty','spe_instr',1,'p_spe_instr','Syntaxer.py',101),
  ('ari_instr_name -> ADD','ari_instr_name',1,'p_ari_instr_name','Syntaxer.py',109),
  ('ari_instr_name -> ADDI','ari_instr_name',1,'p_ari_instr_name','Syntaxer.py',110),
  ('ari_instr_name -> SUB','ari_instr_name',1,'p_ari_instr_name','Syntaxer.py',111),
  ('ari_instr_name -> SUBI','ari_instr_name',1,'p_ari_instr_name','Syntaxer.py',112),
  ('ari_instr_name -> MUL','ari_instr_name',1,'p_ari_instr_name','Syntaxer.py',113),
  ('ari_instr_name -> MULI','ari_instr_name',1,'p_ari_instr_name','Syntaxer.py',114),
  ('reg_instr_name -> MOVI','reg_instr_name',1,'p_reg_instr_name','Syntaxer.py',122),
  ('reg_instr_name -> CMP','reg_instr_name',1,'p_reg_instr_name','Syntaxer.py',123),
  ('reg_instr_name -> CMPI','reg_instr_name',1,'p_reg_instr_name','Syntaxer.py',124),
  ('mem_instr_name -> STR','mem_instr_name',1,'p_mem_instr_name','Syntaxer.py',133),
  ('mem_instr_name -> STRI','mem_instr_name',1,'p_mem_instr_name','Syntaxer.py',134),
  ('mem_instr_name -> LD','mem_instr_name',1,'p_mem_instr_name','Syntaxer.py',135),
  ('bra_instr_name -> BGT','bra_instr_name',1,'p_bra_instr_name','Syntaxer.py',143),
  ('bra_instr_name -> BGTE','bra_instr_name',1,'p_bra_instr_name','Syntaxer.py',144),
  ('bra_instr_name -> BE','bra_instr_name',1,'p_bra_instr_name','Syntaxer.py',145),
  ('bra_instr_name -> B','bra_instr_name',1,'p_bra_instr_name','Syntaxer.py',146),
  ('bra_instr_name -> BRGT','bra_instr_name',1,'p_bra_instr_name','Syntaxer.py',147),
  ('bra_instr_name -> BRGTE','bra_instr_name',1,'p_bra_instr_name','Syntaxer.py',148),
  ('bra_instr_name -> BRE','bra_instr_name',1,'p_bra_instr_name','Syntaxer.py',149),
  ('bra_instr_name -> BR','bra_instr_name',1,'p_bra_instr_name','Syntaxer.py',150),
  ('empty -> <empty>','empty',0,'p_empty','Syntaxer.py',158),
]
